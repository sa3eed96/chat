#!/usr/bin/env node

/**
 * Module dependencies.
 */

var createError = require('http-errors');
var {app, memoryStore} = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');
const UserSocket = require('../models/UserSocket');
const getSessionId= require('../helpers/getSessionId');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require('socket.io')(server);

io.use((socket, next) => {
  try{
    const sessionId = getSessionId(socket.handshake.headers.cookie);
    memoryStore.get(sessionId, async (err,data)=>{
      data.user.socketId = socket.id;
      data.user.isRegistered =  data.user._id ? true : false
      memoryStore.set(sessionId,data, err=> next(err));
      await UserSocket.deleteOne({'userName': data.user.userName});
      await UserSocket.create({'userName': data.user.userName, 'socketId': socket.id });
      io.emit('userConnected',{userName: data.user.userName, socketId: socket.id});
      require('../helpers/socket')(io, socket);
    });
  }
  catch(err){
    console.log('the err', err);
  }
});

require('../routes/users')(app, io, memoryStore);
require('../routes/rooms')(app, io);
require('../routes/friendRequest')(app, io);


// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(error, req, res, next) {
  // set locals, only providing error in development
  //res.locals.error = req.app.get('env') === 'development' ? err : {};
  
  // send error
  console.log(error.message);
  res.status( error.status || 500 ).json({ 'message': error.message });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
